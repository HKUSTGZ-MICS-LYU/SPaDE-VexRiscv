from Flows import Flow
from Flows.VivadoUtils import *

import os
import sys
import time
import shutil
import subprocess

FLOW_BUILD_DIR = "build"
FLOW_REPORT_DIR = FLOW_BUILD_DIR + '/report'
FLOW_RTL_DIR = FLOW_BUILD_DIR + '/rtl'

FLOW_DIRS = " ".join([FLOW_BUILD_DIR, FLOW_REPORT_DIR, FLOW_RTL_DIR])

TCL_TEMPLATE = "Flows/templates/vivado_synth_template.tcl"
TCL_GENERATE = FLOW_BUILD_DIR + '/vivado_synth.tcl'

class VivadoFlow(Flow):

    def __init__(self, part) -> None:
        self.part = part
        self.evaluate_time = -1
        super().__init__()

    def evaluate(self, generated_rtl : str, top_name : str, 
                 clk = 1000, # default clock setting
                 clk_name = 'clk',
                 multi_files = False):
        
        evalutate_time_start = time.time()

        assert os.path.exists(generated_rtl), f"[SpaDE][Error] RTL path not found! ({generated_rtl})"
        os.system(f'mkdir -p {FLOW_DIRS}')
        rtl_file = os.path.basename(generated_rtl)
        rtl_path = FLOW_RTL_DIR + '/' + rtl_file
        shutil.copy(generated_rtl, rtl_path)
        assert os.path.exists(rtl_path), f"[SpaDE][Error] failed to copy RTL! ({rtl_path})"

        if multi_files:
            # TODO: implement multi-file rtl flow
            raise NotImplementedError
        else:
            with open(TCL_TEMPLATE, 'r') as template:
                template_str = template.read()

            tcl_str = template_str.format(
                RTL = rtl_path,
                TOP_NAME = top_name,
                FPGA_TARGET = self.part,
                CLOCK_PERIOD=clk,
                CLOCK_NAME=clk_name,
                REPORT_PATH= FLOW_REPORT_DIR
            )

            with open(TCL_GENERATE, 'w') as tcl:
                tcl.write("# This file is automatically generated at ")
                tcl.write(time.asctime(time.localtime(time.time()))+"\n")
                tcl.write(tcl_str)
        cmd = f"vivado -mode batch -source {TCL_GENERATE} > {FLOW_BUILD_DIR}/vivado.log"
        print(cmd)
        ret = os.system(cmd)
        
        self.evaluate_time = time.time() - evalutate_time_start

        if ret==0:
            result = {}
            result.update(read_delay_report(f"{FLOW_REPORT_DIR}/timing_summary.rpt"))
            result.update(read_clock_report(f"{FLOW_REPORT_DIR}/timing_summary.rpt"))
            result.update(read_util_report(f"{FLOW_REPORT_DIR}/util.rpt"))
            result.update(read_power_report(f"{FLOW_REPORT_DIR}/power.rpt"))
            return result
        else:
            print("[SPaDE][ERROR] Vivado Synthesis failed!")
            return False
    
# Test Example
# if __name__ == "__main__":
#     vvdflow = VivadoFlow("xcau25p-sfvb784-1-i")
#     res = vvdflow.evaluate("Design/riscv/VexRiscv/VexRiscv.v", "VexRiscv")
#     print(res)